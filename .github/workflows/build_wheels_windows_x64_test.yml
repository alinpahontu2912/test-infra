name: X64 Wheels Build

on:
  workflow_call:
    inputs:
      repository_name:
        required: true
        type: string
      repository_branch:
        required: true
        type: string
      python_version:
        required: false
        default: "Python312"
        type: string
      msvc_version:
        required: false
        default: "latest"
        type: string
      # pytorch_build_run_id:
      #   required: true
      #   type: string
      build_type:
        required: false
        default: "Release"
        type: string
      build_version:
        required: false
        type: string

env:
  DOWNLOADS_DIR: c:\temp\downloads\${{ inputs.repository_name }}
  DEPENDENCIES_DIR: c:\temp\dependencies\${{ inputs.repository_name }}
  SCRIPTS_DIR: .github\scripts\winx64test\
  SRC_DIR: src\${{ inputs.repository_name }}
  PYTHON_VERSION: ${{ inputs.python_version }}
  MSVC_VERSION: ${{ inputs.msvc_version }}
  BUILD_TYPE: ${{ inputs.build_type }}
  BUILD_VERSION : ${{ inputs.torchaudio_build_version }}

permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: windows-latest
    name: Build wheel
    steps:
      - name: Git checkout workflow
        uses: actions/checkout@v4
      - name: Bootstrap Git
        run: |
          cmd //c ${{ env.SCRIPTS_DIR }}\bootstrap_git.bat
      - name: Bootstrap Python
        run: |
          cmd //c ${{ env.SCRIPTS_DIR }}\bootstrap_python.bat
      - name: Bootstrap Build Tools
        run: |
         cmd //c ${{ env.SCRIPTS_DIR }}\bootstrap_buildtools.bat
      # TODO This should not be needed, update it when tested
      # - name: Download PyTorch wheel artifact
      #   uses: actions/download-artifact@v4
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     run-id: ${{ inputs.pytorch_build_run_id }}
      #     name: ${{ inputs.pytorch_build_artifact_name }}
      #     path: ${{ env.DOWNLOADS_DIR }}
      - name: Git checkout repo ${{ inputs.repository_name }}
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repository_name }}
          ref: ${{ inputs.repository_branch }}
          path: ${{ env.SRC_DIR }}
          submodules: recursive
      - name: Call Build Script
        shell: pwsh
        run: |
          $repository_name = "${{ inputs.repository_name }}".Split("/")[-1]  # Extract 'audio' or 'vision'
          echo "$repository_name"
          echo "repository_name=$repository_name" | Out-File -FilePath $env:GITHUB_ENV -Append
          if ($repository_name -eq "audio") {
              & "${{ env.SCRIPTS_DIR }}\build_audio.bat"
          } elseif ($repository_name -eq "vision") {
              & "${{ env.SCRIPTS_DIR }}\build_vision.bat"
              echo "Done Building Vision"
          } else {
              throw "Invalid repository name: $repository_name"
          }
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.repository_name }}-wheel
          path: ${{ env.SRC_DIR }}\dist\*
          compression-level: 0
          retention-days: 3